
.drift {
    display: grid;
    grid-template-columns: repeat($span-max, 1fr);
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
    grid-column-gap: 3px;
}


//  S P A N S

[class*=span-] {
    display: grid;
    position: relative;
}

//  Core rules

@mixin span($span) {
    
    grid-template-columns: repeat($span, 1fr);
    
    $offset: ($span-max - $span) / 2;
    grid-column: #{$offset + 1}/#{-1 - $offset};
    
}

//  Subdivision rules

@mixin spans($span) {
    
    @include span($span);
    
    @if $span > $span-max / 4 {
            
        $val: $span-max / $skew-max;
        $skew-adj: round($span / $val);
        
        $directions: l, r;
        
        @each $way in $directions {
            
            $classes: '';
            
            @for $amount from $skew-max through 1 {
                
                @if $skew-adj < $amount {
                    
                    $classes: $classes + '.skew-#{$way}-#{$amount}, ';
                    
                } @else {
                    
                    &#{$classes}.skew-#{$way}-#{$amount} {
                    
                        $col-end: '';
                        
                        @if $way == l {
                            $col-end: ($span / 2) - $amount;
                        } @else {
                            $col-end: ($span / 2) + $amount;
                        }
                        
                        > div:nth-of-type(2n+1), &.flipped > div:nth-of-type(2n+2) {
                            // grid-template-columns: repeat($col-end, 1fr);
                            grid-column: 1 / span #{$col-end};
                            order: 1;
                        }
                        
                        > div:nth-of-type(2n+2), &.flipped > div:nth-of-type(2n+1) {
                            // grid-template-columns:      repeat(($span - $col-end), 1fr);
                            grid-column: #{$col-end +1} / -1;
                            order: 2;
                        }
                        
                    }
                    
                    $classes: '';
                
                }
            
            }
        
        }
    
    }
    
}

//  Responsiveness

@for $span from $span-max through $span-min {
    
    @if $span % 2 == 0 {
      
        .drift .span-#{$span} {
        
            @include media(standard-large) {
                
                @include spans($span);
                
            }
            
            //  Limit the width variations on handhelds
            //  to groups of three
            
            //  6 = the amount of spans to group?
            //  8 = maybe 24 / (6 / 2)?
            $resp-span: (floor($span / 6) + 8) * 2;
            
            @include media(tablet) {
                    
                @include spans($resp-span);
            
            }
            
            @include media(phone-plus) {
                
                @include span($resp-span);
                
                > div, > div[class*="cols-"] > div {
                    grid-column: 1 / -1;
                }
                
            }
            
        }
        
    }

}


//  C O L S

//  Must come after the span classes

.drift [class*="cols-"] {
    display: grid;
    grid-template-rows: 1;
}

@for $col from 2 through $cols-max {
    
    .drift .cols-#{$col}:not([class*="skew-"]) {
        
        grid-template-columns: repeat(#{$col}, 1fr);
            
        @for $div from 1 through $col {

            > div:nth-of-type(#{$col}n+#{$div}), &.flipped > div:nth-of-type(#{$col}n+#{$col - $div + 1}) {
                order: $div;
                grid-column: $div;
            }

        }
        
        @include media(phone-plus) {
            
            > div:nth-of-type(n) {
                grid-column: 1 / -1;
            }
            
        }
        
    }
    
}


//  O T H E R

//  Non grid element

.drift *:not([class*=span-]) {
    grid-column: 1 / -1;
}

img {
    width: 100%;
}


//  D E V

$color-dev-bkgd: rgba(255, 0, 0, 0.1);

[class*=cols-] > div {
     background-color: $color-dev-bkgd;
}

#dev-grid {
    
    width: 100%;
    
    [class*="span-"] > div {
        overflow: hidden;
        background-color: $color-dev-bkgd;
        box-shadow: inset 1px 0 0 0 white;
    }
    
    .span-24 {
    
        @for $span from 1 through $span-max {
        
            > div:nth-of-type(#{$span}) {
                grid-column: #{$span};
            }
            
        }
    
    }
    
    [class*="span-"] > div:nth-of-type(n+13) {
        text-align: right;
        box-shadow: inset -1px 0 0 0 white;
    }
    
}
