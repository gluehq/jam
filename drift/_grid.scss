
.drift {
    display: grid;
    grid-template-columns: repeat($span-max, 1fr);
    @include gaps();
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
}


//  S P A N S

[class*=span-] {
    display: grid;
    position: relative;
    @include gaps();
}

//  Core rules

@mixin span($span) {
    
    grid-template-columns: repeat($span, 1fr);
    
    $offset: ($span-max - $span) / 2;
    grid-column: #{$offset + 1}/#{-1 - $offset};
    
}

@mixin cols-2($col-end) {
  
    &.cols-2 {
        
        grid-template-columns: repeat(#{$col-end}, 1fr);
        
        $col-end: $col-end / 2;
            
        > div:nth-of-type(2n+1), &.flipped > div:nth-of-type(2n+2) {
            // grid-template-columns: repeat($col-end, 1fr);
            grid-column: 1 / span #{$col-end};
            order: 1;
        }
            
        > div:nth-of-type(2n+2), &.flipped > div:nth-of-type(2n+1) {
            // grid-template-columns: repeat(($span - $col-end), 1fr);
            grid-column: #{$col-end + 1} / -1;
            order: 2;
        }
            
        &.pack-l:not(.flipped) > div:nth-of-type(2n+1), &.flipped.pack-l > div:nth-of-type(2n+2) {
            grid-column: 2 / span #{$col-end - 1};
        }
            
        &.pack-r:not(.flipped) > div:nth-of-type(2n+2), &.flipped.pack-r > div:nth-of-type(2n+1) {
            grid-column: #{$col-end + 1} / -2;
        }
        
    }
    
}

//  Subdivision rules

@mixin spans($span) {
    
    .drift .span-#{$span} {
        @include span($span);
    }
        
    @for $cols from 2 through $cols-max {
        
        .drift .cols-#{$cols} {
                
            display: grid;
            grid-template-columns: repeat(#{$cols}, 1fr);
            @include gaps();
            
            @for $col from 1 through $cols {
                
                > div:nth-of-type(#{$cols}n+#{$col}), &.flipped > div:nth-of-type(#{$cols}n+#{$cols - $col + 1}) {
                    grid-column: $col;
                    order: $col;
                }
                
            }
            
        }
        
        @if $cols == 2 {
            
            $col-span: round($span / $cols);
            
            .drift .span-#{$span}.cols-#{$cols} {
                
                grid-template-columns: repeat(#{$span}, 1fr);
                
            }
            
            @if $span > $span-max / 4 {
                
                $val: $span-max / $skew-max;
                $skew-adj: round($span / $val);
                
                $directions: l, r;
                
                @each $way in $directions {
                    
                    $classes: '';
                    
                    @for $amount from $skew-max through 1 {
                        
                        @if $skew-adj < $amount {
                            
                            $classes: $classes + '.drift .span-#{$span}.skew-#{$way}-#{$amount}, ';
                            
                        } @else {
                            
                            #{$classes}.drift .span-#{$span}.skew-#{$way}-#{$amount} {
                                
                                // content: '#{$classes}';
                                
                                $col-end: '';
                                
                                @if $way == l {
                                    $col-end: ($span / 2) - $amount;
                                } @else {
                                    $col-end: ($span / 2) + $amount;
                                }
                                
                                > div:nth-of-type(2n+1), &.flipped > div:nth-of-type(2n+2) {
                                    
                                    // grid-template-columns: repeat($col-end, 1fr);
                                    grid-column: 1 / span #{$col-end};
                                    order: 1;
                                    
                                    @include cols-2($col-end);
                                    
                                }
                                
                                > div:nth-of-type(2n+2), &.flipped > div:nth-of-type(2n+1) {
                                    
                                    // grid-template-columns: repeat(($span - $col-end), 1fr);
                                    grid-column: #{$col-end + 1} / -1;
                                    order: 2;
                                    
                                    @include cols-2($col-end);
                                    
                                }
                                
                                &.pack-l:not(.flipped) > div:nth-of-type(2n+1), &.flipped.pack-l > div:nth-of-type(2n+2) {
                                    
                                    grid-column: 2 / span #{$col-end - 1};
                                    
                                    @include cols-2($col-end);
                                    
                                }
                                
                                &.pack-r:not(.flipped) > div:nth-of-type(2n+2), &.flipped.pack-r > div:nth-of-type(2n+1) {
                                    
                                    grid-column: #{$col-end + 1} / -2;
                                    
                                    @include cols-2($col-end);
                                    
                                }
                                
                            }
                                
                            $classes: '';
                            
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
}

//  Responsiveness

@for $span from $span-max through $span-min {
    
    @if $span % 2 == 0 {
        
        @include media(standard-large) {
            
            @include spans($span);
            
        }
        
        //  Limit the width variations on handhelds
        //  to number of groups set with $span-rgs
        
        $span-rem: ($span-max - $span) / 2;
        $span-mod: ceil($span-rem / $span-rgs);
        $resp-span: $span-max - ($span-mod * 2);
        
        @include media(tablet) {
            
            @include spans($resp-span);
            
        }
        
        @include media(phone-plus) {
            
            .drift .span-#{$span} {
                
                @include span($resp-span);
                    
                > div, > div[class*="cols-"] > div {
                    grid-column: 1 / -1;
                }
                
            }
            
        }
        
    }
    
}


//  O T H E R

//  Non grid element

.drift *:not([class*=span-]) {
    grid-column: 1 / -1;
}

//  Make images fit their cols

img {
    width: 100%;
}


//  D E V

$color-dev-bkgd: rgba(255, 0, 0, 0.1);

[class*=cols-] > div {
     background-color: $color-dev-bkgd;
}

#dev-grid {
    
    width: 100%;
        
    [class*=span-] {
        
        @for $span from 1 through $span-max {
            
            > div:nth-of-type(#{$span}) {
                grid-column: #{$span};
            }
            
        }
        
    }
        
    [class*=span-] > div {
        overflow: hidden;
        background-color: $color-dev-bkgd;
        // box-shadow: inset 1px 0 0 0 white;
    }
        
    [class*=span-] > div:nth-of-type(n+#{($span-max / 2) + 1}) {
        text-align: right;
        // box-shadow: inset -1px 0 0 0 white;
    }
    
}
