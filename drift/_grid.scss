
//  B A S E

.drift {
    display: grid;
    grid-template-columns: repeat($span-max, 1fr);
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
}

.drift [class*=span-] {
    display: grid;
    position: relative;
}

//  Non grid element

.drift *:not([class*=span-]) {
    grid-column: 1 / -1;
}

//  Make images fit their cols

img {
    width: 100%;
}


//  C O L S

//  Output uniform cols for flipped and fallback rules

@mixin cols-uniform($media) {

    @for $cols from 2 through $cols-max {

        @if $media != phone and $media != plus {
        
            .drift .cols-#{$cols} {
                
                display: grid;
                grid-template-columns: repeat(#{$cols}, 1fr);
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}), &.flipped > div:nth-of-type(#{$cols}n+#{$cols - $col + 1}) {
                        grid-column: $col;
                        order: $col;
                    }
                    
                }
                
            }

        } @else {

            .drift .cols-#{$cols} {

                grid-template-columns: 1fr;

                > div:nth-of-type(n) {
                    grid-column: 1 / -1;
                }

            }

        }

    }
    
}

//  Output skewed cols

@mixin cols-skewed($span, $span-actual, $span-to, $media) {

    $span-selects: '';

    @for $span-this from $span through $span-to {

        @if $span-this % 2 == 0 {

            @if $span-this != $span-to {

                $span-selects: $span-selects + '.drift .span-#{$span-this}, ';

            } @else {

                #{$span-selects}.drift .span-#{$span-this} {
                    @include span($span-actual);
                }

            }

        }

    }

    $span-selects: '';

    @if $span > $span-max / 4 {
        
        $directions: l, r;
            
        $classes: '';
        
        @each $way in $directions {

            $skew-mod: $span-max / $skew-max;
            $skew-new: round($span-actual / $skew-mod);
            
            @for $skew-this from $skew-max through 1 {
                
                @if $skew-new < $skew-this {

                    @for $span-this from $span through $span-to {

                        @if $span-this % 2 == 0 {
                            
                            $classes: $classes + '.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this}, ';

                        }

                    }
                    
                } @else {

                    @for $span-this from $span through $span-to {

                        @if $span-this % 2 == 0 {

                            @if $span-this != $span-to {

                                $classes: $classes + '.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this}, ';

                            } @else {

                                #{$classes}.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this} {
                                    
                                    $perc: (100 / $span-actual) * (($span-actual / 2) + $skew-this);
                                    
                                    @if $way == l {

                                        grid-template-columns: auto calc(#{$perc}% - #{(xgap($media) / 100) * (100 - $perc)});

                                    } @else {

                                        grid-template-columns: calc(#{$perc}% - #{(xgap($media) / 100) * (100 - $perc)}) auto;

                                    }

                                }

                            }

                        }
                        
                    }
                
                    $classes: '';
                    
                }
                
            }
            
        }
    
    }

}


//  S P A N S

//  Spans define the width of each page row

@mixin span($span) {
    
    $offset: ($span-max - $span) / 2;
    
    // NB a grid-template-columns rule here would break uniform col fallbacks
    grid-column: #{$offset + 1}/#{-1 - $offset};
    
}

@function span-resp($span) {
    $span-rem: ($span-max - $span) / 2;
    $span-mod: ceil($span-rem / $span-resp-grp);
    $span-resp: $span-max - ($span-mod * 2);
    @return $span-resp;
}

@mixin spans($media) {
    
    .drift, .drift [class*=span-], .drift [class*=cols-] {
        grid-column-gap: xgap($media);
        grid-row-gap: ygap($media);
    }

    $span-resp-end: $span-max;
    
    @for $span from $span-max through $span-min {
        
        @if $span % 2 == 0 {
            
            @if $media == phone or $media == plus or $media == tablet {
                
                @if $span < $span-resp-end {

                    @for $span-this from $span through $span-min {

                        @if $span-this % 2 == 0 {
                            @if span-resp($span-this) == span-resp($span) {
                                $span-resp-end: $span-this;
                            }
                        }

                    }

                    @include cols-skewed($span, span-resp($span), $span-resp-end, $media);

                }
                
            } @else {
                
                @include cols-skewed($span, $span, $span, $media);
                
            }
            
        }
        
    }
    
}


//  M E D I A

@include cols-uniform(large);

@include spans(large);

@each $media in $all-media {
    
    @include media($media) {

        @if $media == phone or $media == plus or $media == tablet {
            @include cols-uniform($media);
        }

        @if $media != large {
            @include spans($media);
        }
        
    }
    
}


//  D E V

$color-dev-bkgd: rgba(255, 0, 0, 0.1);

[class*=cols-] > div {
     // background-color: $color-dev-bkgd;
}

#dev-grid {
    
    display: none;
    width: 100%;
        
    [class*=span-] {

        grid-template-columns: repeat($span-max, 1fr);
        
        @for $span from 1 through $span-max {
            
            > div:nth-of-type(#{$span}) {
                grid-column: #{$span};
            }
            
        }
        
    }
        
    [class*=span-] > div {
        overflow: hidden;
        background-color: $color-dev-bkgd;
    }
        
    [class*=span-] > div:nth-of-type(n+#{($span-max / 2) + 1}) {
        text-align: right;
    }
    
}
