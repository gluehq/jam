
//  B A S E

.drift {
    display: grid;
    grid-template-columns: repeat($span-max, 1fr);
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
}

.drift [class*=span-] {
    display: grid;
    position: relative;
}

//  Non grid element

.drift *:not([class*=span-]) {
    grid-column: 1 / -1;
}

//  Make images fit their cols

img {
    width: 100%;
}


//  C O L S

//  Output even cols for flipped and fallback rules

@mixin cols-even($media) {

    @for $cols from 2 through $cols-max {

        @if $media != phone and $media != plus {
        
            .drift .cols-#{$cols} {
                
                display: grid;
                grid-template-columns: repeat(#{$cols}, 1fr);
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}), &.flipped > div:nth-of-type(#{$cols}n+#{$cols - $col + 1}) {
                        grid-column: $col;
                        order: $col;
                    }
                    
                }
                
            }

        } @else {

            .drift .cols-#{$cols} {
                grid-template-columns: 1fr;
            }

        }

    }
    
//    @include media(phone-plus) {
       
//        .drift .cols-#{$cols} {
//            grid-template-columns: 1fr;
//        }
       
//    }
    
}

//  Output skewed cols

@mixin skew-cols($perc, $media) {
    grid-template-columns: calc(#{$perc}% - #{(xgap($media) / 100) * (100 - $perc)}) auto;
}

@mixin cols($span, $span-actual, $span-to, $media) {
    
    // $cols: 2;
        
    // $col-span: round($span / $cols);

    $span-selects: '';

    @for $span-this from $span through $span-to {

        @if $span-this % 2 == 0 {
            

            // @if $span-this == $span-to {

            @if $span-this != $span-to {

                $span-selects: $span-selects + '.drift .span-#{$span-this}, ';

            } @else {

                #{$span-selects}.drift .span-#{$span-this} {
                    @include span($span-actual);
                }

                // .tim {
                //     content: '--- #{$span-to}';
                // }

            }

        }

    }

    $span-selects: '';

    // }

    // $classes: $classes + '.drift .span-#{$span-this}';

    @if $span > $span-max / 4 {
        
        $directions: l, r;
            
        $classes: '';
        
        @each $way in $directions {

            $skew-mod: $span-max / $skew-max;
            $skew-new: round($span-actual / $skew-mod);
            
            @for $skew-this from $skew-max through 1 {
                
                @if $skew-new < $skew-this {
                    
                    // $classes: $classes + '.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this}, ';

                    @for $span-this from $span-actual through $span-to {

                        @if $span-this % 2 == 0 {
                            
                            $classes: $classes + '.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this}, ';

                        }

                    }
                    
                } @else {
                    
                    // #{$classes}.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this} {

                    @for $span-this from $span-actual through $span-to {

                        @if $span-this % 2 == 0 {

                            @if $span-this != $span-to {

                                $classes: $classes + '.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this}, ';

                            } @else {

                                #{$classes}.drift .span-#{$span-this}.skew-#{$way}-#{$skew-this} {
                                    
                                    // content: '#{$classes}';
                                    
                                    $perc: (100 / $span-actual) * (($span-actual / 2) + $skew-this);
                                    // content: '#{$perc}';
                                    @include skew-cols($perc, $media);

    //     //     //                                $col-end: '';
    //     //     //                                
    //     //     //                                @if $way == l {
    //     //     //                                    $col-end: ($span / 2) - $skew-this;
    //     //     //                                } @else {
    //     //     //                                    $col-end: ($span / 2) + $skew-this;
    //     //     //                                }
    //     //     //                                
    //     //     //                                > div:nth-of-type(2n+1), &.flipped > div:nth-of-type(2n+2) {
    //     //     //                                    
    //     //     //                                    // grid-template-columns: repeat($col-end, 1fr);
    //     //     //                                    grid-column: 1 / span #{$col-end};
    //     //     //                                    order: 1;
    //     //     //                                    
    //     //     //                                    // @include cols-2($col-end);
    //     //     //                                    
    //     //     //                                }
    //     //     //                                
    //     //     //                                > div:nth-of-type(2n+2), &.flipped > div:nth-of-type(2n+1) {
    //     //     //                                    
    //     //     //                                    // grid-template-columns: repeat(($span - $col-end), 1fr);
    //     //     //                                    grid-column: #{$col-end + 1} / -1;
    //     //     //                                    order: 2;
    //     //     //                                    
    //     //     //                                    // @include cols-2($col-end);
    //     //     //                                    
    //     //     //                                }
    //     //     //                                
    //     //     //                                &.pack-l:not(.flipped) > div:nth-of-type(2n+1), &.flipped.pack-l > div:nth-of-type(2n+2) {
    //     //     //                                    
    //     //     //                                    grid-column: 2 / span #{$col-end - 1};
    //     //     //                                    
    //     //     //                                    // @include cols-2($col-end);
    //     //     //                                    
    //     //     //                                }
    //     //     //                                
    //     //     //                                &.pack-r:not(.flipped) > div:nth-of-type(2n+2), &.flipped.pack-r > div:nth-of-type(2n+1) {
    //     //     //                                    
    //     //     //                                    grid-column: #{$col-end + 1} / -2;
    //     //     //                                    
    //     //     //                                    // @include cols-2($col-end);
    //     //     //                                    
    //     //     //                                }

                                }
                                    
                                // $classes: '';
                
                                $classes: '';

                            }

                        }
                        
                    }
                    
                }
                
            }
            
        }
    
    }// Skews end

    // $span-selects: '';

}


//  S P A N S

//  Spans define the width of each page row

@mixin span($span) {
    
    $offset: ($span-max - $span) / 2;
    
    grid-template-columns: repeat($span, 1fr);
    grid-column: #{$offset + 1}/#{-1 - $offset};
    
}

@function span-resp($span) {
    $span-rem: ($span-max - $span) / 2;
    $span-mod: ceil($span-rem / $span-rgs);
    $span-resp: $span-max - ($span-mod * 2);
    @return $span-resp;
}

@mixin spans($media) {
    
    .drift, .drift [class*=span-], .drift [class*=cols-] {
        grid-column-gap: xgap($media);
        grid-row-gap: ygap($media);
    }

    // $span-resp-end: $span-max !global;
    $span-resp-end: $span-max;
    
    @for $span from $span-max through $span-min {
        
        @if $span % 2 == 0 {
            
            // @if $media == large {
                
            //     .drift .span-#{$span} {
            //         @include span($span);
            //     }
                
            // }
            
            @if $media == phone or $media == plus {
                
                //  Limit the width variations on handhelds
                //  to number of groups set with $span-rgs

                //  1. look ahead to group the spans
                // .tim {
                //     content: '#{$span} #{$span-resp-end}';
                // }


                @if $span < $span-resp-end {

                    @for $span-this from $span through $span-min {

                        @if $span-this % 2 == 0 {
                            @if span-resp($span-this) == span-resp($span) {
                                $span-resp-end: $span-this;
                            }
                        }

                    }
                    // .tim {
                    //     content: 'span #{$span} end #{$span-resp-end}';
                    // }

                    // content: '#{$span}, #{span-resp($span)} --------- #{$span-resp-end}';

                    // @if $span > $span-resp-end {
                    //     content: 'compounds';
                    // }
                

                    @include cols($span, span-resp($span), $span-resp-end, $media);
                    

                }
                
            } @else {
                
                @include cols($span, $span, $span, $media);
                
            }
            
        }
        
    }
    
}


//  M E D I A

@include cols-even(large);

@include spans(large);

@each $media in $all-media {
    
    @include media($media) {

        @if $media == phone or $media == plus {
            @include cols-even($media);
        }

        @if $media != large {
            @include spans($media);
            // .tim {
            //     content: '.';
            // }
        }
        
    }
    
}


//  D E V

$color-dev-bkgd: rgba(255, 0, 0, 0.1);

[class*=cols-] > div {
     background-color: $color-dev-bkgd;
}

#dev-grid {
    
    // display: none;
    width: 100%;
        
    [class*=span-] {
        
        @for $span from 1 through $span-max {
            
            > div:nth-of-type(#{$span}) {
                grid-column: #{$span};
            }
            
        }
        
    }
        
    [class*=span-] > div {
        overflow: hidden;
        background-color: $color-dev-bkgd;
        // box-shadow: inset 1px 0 0 0 white;
    }
        
    [class*=span-] > div:nth-of-type(n+#{($span-max / 2) + 1}) {
        text-align: right;
        // box-shadow: inset -1px 0 0 0 white;
    }
    
}
