
//  B A S E

.jam {
    display: grid;
    grid-template-columns: repeat($row-max, 1fr);
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
}

.jam [class*=row-], .jam [class*=cols-] {
    display: grid;
    position: relative;
}

//  Make images fit their cols

body {
    margin: 0;
}

img {
    width: 100%;
}

//  Remove bottom margins from last paragraphs etc
//  Removed because we want some divs in templates to give a class to contents eg intro

div > *:last-child {
    // margin-bottom: 0;
}

//  S P A N S  &  C O L S

//  Output uniform cols for flip and fallback rules

@mixin cols-uniform($media) {

    @for $cols from 2 through $cols-max {

        @if $media != phone-plus {

            /* Flip */
        
            .jam .cols-#{$cols} {
                
                // grid-template-columns: repeat(#{$cols}, 1fr);
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}), &.flip > div:nth-of-type(#{$cols}n+#{$cols - $col + 1}) {
                        // grid-column: $col;
                        order: $col;
                    }
                    
                }
                
            }

        } @else {

            .jam .cols-#{$cols}, .jam .cols-#{$cols}.flip {
            // .jam .cols-#{$cols} {
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}) {
                        grid-column: 1 / -1;
                        order: $col;
                    }
                    
                }

            }

        }

    }
    
}

//  Output skewed cols

@mixin row($row) {
    
    $offset: ($row-max - $row) / 2;
    
    //  NB a grid-template-columns rule here breaks uniform col fallbacks
    //  But one is needed so we can position stuff on the sub grid, so...
    grid-template-columns: repeat(#{$row}, 1fr);
    grid-column: #{$offset + 1}/#{-1 - $offset};

    @for $cols from 2 through $cols-max {

        &.cols-#{$cols} > div {
            grid-column: span floor($row / $cols);
        }

    }
    
}

@mixin cols-skewed($row, $row-actual, $row-to, $media) {

    $row-selects: '';

    @for $row-this from $row through $row-to {

        @if $row-this % 2 == 0 {

            @if $row-this != $row-to {

                $row-selects: $row-selects + '.jam .row-#{$row-this}, ';

            } @else {

                @if $media == phone-plus {

                    /* Merging phones */

                    #{$row-selects}.jam .row-#{$row-this} {

                        &, &[class*=cols-] {

                            $row-inset: ($row-max - $row-actual) / 2;

                            //  Start with the first so we can keep spaces between additional frs tidy
                            $row-frs: '1fr';
                            @for $i from 2 through $row-inset {
                                $row-frs: $row-frs + ' 1fr';
                            }
                            grid-column: 1 / -1;
                            grid-template-columns: repeat(#{$row-max}, 1fr);

                            > div:nth-child(n), &.flip div:nth-child(n) {
                                grid-column: #{$row-inset + 1} / #{0 - ($row-inset + 1)};
                            }

                        }

                    }

                } @else {

                    /* Merging other */

                    #{$row-selects}.jam .row-#{$row-this} {
                        @include row($row-actual);
                    }

                }

            }

        }

    }

    // @if $media != phone and $media != plus {

    //     $row-selects: '';

    //     @if $row > $row-max / 4 {
            
    //         $directions: l, r;
                
    //         $classes: '';
            
    //         @each $way in $directions {

    //             $skew-mod: $row-max / $skew-max;
    //             $skew-new: ceil($row-actual / $skew-mod);
                
    //             @for $skew-this from $skew-max through 1 {
                    
    //                 @if $skew-new < $skew-this {

    //                     @for $row-this from $row through $row-to {

    //                         @if $row-this % 2 == 0 {
                                
    //                             $classes: $classes + '.jam .row-#{$row-this}.skew-#{$way}-#{$skew-this}, ';

    //                         }

    //                     }
                        
    //                 } @else {

    //                     @for $row-this from $row through $row-to {

    //                         @if $row-this % 2 == 0 {

    //                             @if $row-this != $row-to {

    //                                 $classes: $classes + '.jam .row-#{$row-this}.skew-#{$way}-#{$skew-this}, ';

    //                             } @else {

    //                                 #{$classes}.jam .row-#{$row-this}.skew-#{$way}-#{$skew-this} {

    //                                     $skew-limit: $skew-max / 1.5;

    //                                     @if $media == tablet and $skew-this > $skew-limit {

    //                                         grid-template-columns: #{$row-actual}fr;

    //                                         > div:nth-of-type(n), &.flip > div:nth-of-type(n) {
    //                                             order: 1;
    //                                             grid-column: 1 / -1;
    //                                         }

    //                                     } @else {
                                        
    //                                         $perc: (100 / $row-actual) * (($row-actual / 2) + $skew-this);
                                            
    //                                         @if $way == l {
    
    //                                             grid-template-columns: auto calc(#{$perc}% - #{(xgap($media) / 100) * (100 - $perc)});
    
    //                                         } @else {
    
    //                                             grid-template-columns: calc(#{$perc}% - #{(xgap($media) / 100) * (100 - $perc)}) auto;
    
    //                                         }

    //                                     }

    //                                 }

    //                             }

    //                         }
                            
    //                     }
                    
    //                     $classes: '';
                        
    //                 }
                    
    //             }
                
    //         }
        
    //     }

    // }

}

//  rows define the width of each page row

@function row-resp($row) {
    $row-rem: ($row-max - $row) / 2;
    $row-mod: ceil($row-rem / $row-resp-grp);
    $row-resp: $row-max - ($row-mod * 2);
    @return $row-resp;
}

@mixin rows($media) {

    // @if $media == phone or $media = plus {

    //     .jam [class*=cols-] {
    //         // grid-column-gap: 0;
    //         grid-row-gap: 0;
    //     }

    // }

    $row-resp-end: $row-max;
    
    @for $row from $row-max through $row-min {
        
        @if $row % 2 == 0 {

            @if $media == large {
            
                @include cols-skewed($row, $row, $row, $media);

            }
            
            @if $media == phone-plus or $media == phone-tablet {
                
                @if $row < $row-resp-end {

                    @for $row-this from $row through $row-min {

                        @if $row-this % 2 == 0 {
                            @if row-resp($row-this) == row-resp($row) {
                                $row-resp-end: $row-this;
                            }
                        }

                    }

                    @include cols-skewed($row, row-resp($row), $row-resp-end, $media);

                }
                
            }
            
        }
        
    }
    
}

@mixin gaps($media) {
    
    @if $media != phone-plus and $media != phone-plus {

        .jam, .jam [class*=row-], .jam [class*=cols-] {
            grid-column-gap: xgap($media);
            grid-row-gap: ygap($media);
        }

    }

}

//  M E D I A

//  Non grid element

.jam *:not([class*=row-]) {
    grid-column: 1 / -1;
}

/* Gaps */
@include gaps(large);

/* Rows */
@include rows(large);

/* Cols (uniform2) */
@include cols-uniform(large);

@each $media in $all-media {
    
    @include media($media) {

        @if $media != large and $media != phone-tablet and $media != phone-plus {

            /* Gaps */
            @include gaps($media);

        }

        @if $media == phone-tablet {

            /* Rows */
            @include rows($media);

        }

        @if $media == phone-plus {
        
            /* Reduce tablet and phone margins */
            .jam *:not([class*=row-]) {
                grid-column: 2 / -2;
            }

            /* Rows */
            @include rows($media);
            
            /* Cols (uniform) */
            @include cols-uniform($media);

            /* Bleeds */
            .jam [class*=row-].bleed-ph > div:nth-of-type(2n+1), .jam [class*=row-].flip.bleed-ph > div:nth-of-type(2n+1) {
                grid-column: 1 / -1;
            }

        }

    }

}

// @include cols-uniform(large);

// @each $media in $all-media {

//     @include media($media) {

//         @if $media == phone or $media == plus or $media == tablet {
//             @include cols-uniform($media);
//         }

//     }

// }
