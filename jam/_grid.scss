
@import 'base';


//  B A S E

body {
    margin: 0;
}

.jam-jar {

    position: relative;
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
    min-width: 320px;

}

[class*=jam-span-] {

    position: relative;
    margin: 0 auto;

    &.align-l {
        margin: 0;
    }

    &.align-r {
        margin: 0 0 0 auto;
    }

    * {
        box-sizing: border-box;
        position: relative;
        width: 100%;
    }

    //  Make images fit their cols
    img {
        width: 100%;
        max-width: none;
    }

    // Remove bottom margins from last paragraphs etc. Causes some issues, but usually beneficial
    *:last-child {
        margin-bottom: 0;
    }

}

[class*=jam-cols-] {
    display: flex;
    flex-wrap: wrap;
    position: relative;
}


//  M I X I N S

// Set common vars
$cols-min: nth($cols, 1);
$cols-max: nth($cols, -1);

/* Spans */

@mixin span($span, $span-actual, $span-to, $media) {

    // Collapse handheld span widths if $span and $span-to are different

    $span-selects: '';

    @for $span-this from $span through $span-to {

        @if $media == phone-plus {

            @if $span-this != $span-to {

                // Build up the string of selectors to merge before rules

                $span-selects: $span-selects + '.jam-span-#{$span-this}, ';

            } @else {

                // Maximise phone span widths and transfer inset to columns

                #{$span-selects}.jam-span-#{$span-this} {

                    width: percentage($span-actual/$span-max);

                    &[class*=jam-span] > div, [class*=jam-span] > div {
                        width: 100%;
                    }

                    & [class*=jam-span].jam-bleed, &[class*=jam-span] .jam-bleed {

                        margin: 0 percentage((($span-max - $span-actual) / 2)/$span-actual) * -1;
                        width: percentage(($span-actual + ($span-max - $span-actual))/$span-actual);

                    }

                }

            }

        } @else {

            .jam-span-#{$span-this} {

                width: percentage($span-this/$span-max);

                @for $sub-width from $span-this through $span-min {

                    .jam-span-#{$sub-width} {
                        width: percentage($sub-width/$span-this);
                    }

                }

            }

        }

    }

}

// Return which span a span will merge to
// Amount of spans that merge together set with $spans-merge

@function merge-span($span) {
    $span-remain: ($span-max - $span) / 2;
    $span-mod: ceil($span-remain / $spans-merge);
    $spans-merge: $span-max - ($span-mod * 2);
    @return $spans-merge;
}

// Check media and build standard or merged span

@mixin build-span($media) {

    $spans-merge-last: $span-max;
    
    @for $span from $span-max through $span-min {

        @if $media == large {
        
            @include span($span, $span, $span, $media);

        }
        
        @if $media == phone-plus {
            
            @if $span < $spans-merge-last {

                @for $sub-span from $span through $span-min {

                    @if merge-span($sub-span) == merge-span($span) {
                        $spans-merge-last: $sub-span;
                    }

                }

                @include span($span, merge-span($span), $spans-merge-last, $media);

            }
            
        }
        
    }
    
}

@include build-span(large);

/* Gaps */

@mixin gaps($media) {

    [class*=jam-span-] {

        *:not(div) {
            padding: 0 jam-gap-x($media, 0.5);
        }

    }

    @for $padding from $padding-mod-max through 1 {

        [class*=jam] {// Increase specificity and allow usage on jam-jar

            &.jam-top-#{$padding}, .jam-top-#{$padding} {
                padding-top: jam-gap-y($media, $padding * 0.5);
            }

            &.jam-bottom-#{$padding}, .jam-bottom-#{$padding} {
                padding-bottom: jam-gap-y($media, $padding * 0.5);
            }

            @if $media == phone or $media == plus {

                &.jam-top-ph-#{$padding}, .jam-top-ph-#{$padding} {
                    padding-top: jam-gap-y($media, $padding * 0.5);
                }
    
                &.jam-bottom-ph-#{$padding}, .jam-bottom-ph-#{$padding} {
                    padding-bottom: jam-gap-y($media, $padding * 0.5);
                }

            }

        }

    }

}

@include gaps(large);

/* Uniform column widths */

@each $col in $cols {

    .jam-cols-#{$col} > div {
        width: percentage(1/$col);
    }

}

/* Flip */

.jam-flip {
    flex-direction: row-reverse;
}

/* Media query loop */

@each $media in $all-media {
    
    @include jam-media($media) {

        @if $media != large {
            @include build-span($media);
        }

        // Avoid double-ups
        @if $media != large and $media != phone-plus {
            @include gaps($media);
        }

        @if $media == phone-plus {

            // Removing gaps around full-bleed images on phone
            [class*=jam-span].jam-bleed, [class*=jam-span] .jam-bleed {

                *, div {
                    padding: 0;
                }

            }

        }

    }

}
