
//  B A S E

.jam {
    display: grid;
    grid-template-columns: repeat($span-max, 1fr);
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
}

.jam [class*=span-] {
    display: grid;
    position: relative;
}

//  Make images fit their cols

body {
    margin: 0;
}

img {
    width: 100%;
}

//  Remove bottom margins from last paragraphs etc

div > *:last-child {
    margin-bottom: 0;
}


//  S P A N S  &  C O L S

//  Output uniform cols for flip and fallback rules

@mixin cols-uniform($media) {

    @for $cols from 2 through $cols-max {

        @if $media != phone and $media != plus {
        
            .jam .cols-#{$cols} {
                
                display: grid;
                grid-template-columns: repeat(#{$cols}, 1fr);
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}), &.flip > div:nth-of-type(#{$cols}n+#{$cols - $col + 1}) {
                        grid-column: $col;
                        order: $col;
                    }
                    
                }
                
            }

        } @else {

            .jam .cols-#{$cols}, .jam .cols-#{$cols}.flip {

                grid-template-columns: 1fr;
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}) {
                        grid-column: 1 / -1;
                        order: $col;
                    }
                    
                }

            }

        }

    }
    
}

//  Output skewed cols

@mixin span($span) {
    
    $offset: ($span-max - $span) / 2;
    
    //  NB a grid-template-columns rule here would break uniform col fallbacks
    grid-template-columns: repeat(#{$span}, 1fr);
    grid-column: #{$offset + 1}/#{-1 - $offset};
    
}

@mixin cols-skewed($span, $span-actual, $span-to, $media) {

    $span-selects: '';

    @for $span-this from $span through $span-to {

        @if $span-this % 2 == 0 {

            @if $span-this != $span-to {

                $span-selects: $span-selects + '.jam .span-#{$span-this}[class*=cols-], ';

            } @else {

                @if $media == phone or $media == plus {

                    #{$span-selects}.jam .span-#{$span-this}[class*=cols-] {

                        $span-inset: ($span-max - $span-actual) / 2;

                        //  Start with the first so we can keep spaces between additional frs tidy
                        $span-frs: '1fr';
                        @for $i from 2 through $span-inset {
                            $span-frs: $span-frs + ' 1fr';
                        }
                        grid-column: 1 / -1;
                        grid-template-columns: repeat(#{$span-max}, 1fr);

                        > div:nth-child(n), &.flip div:nth-child(n) {
                            grid-column: #{$span-inset + 1} / #{0 - ($span-inset + 1)};
                        }

                    }

                } @else {

                    #{$span-selects}.jam .span-#{$span-this} {
                        @include span($span-actual);
                    }

                }

            }

        }

    }

    @if $media != phone and $media != plus {

        $span-selects: '';

        @if $span > $span-max / 4 {
            
            $directions: l, r;
                
            $classes: '';
            
            @each $way in $directions {

                $skew-mod: $span-max / $skew-max;
                $skew-new: ceil($span-actual / $skew-mod);
                
                @for $skew-this from $skew-max through 1 {
                    
                    @if $skew-new < $skew-this {

                        @for $span-this from $span through $span-to {

                            @if $span-this % 2 == 0 {
                                
                                $classes: $classes + '.jam .span-#{$span-this}.skew-#{$way}-#{$skew-this}, ';

                            }

                        }
                        
                    } @else {

                        @for $span-this from $span through $span-to {

                            @if $span-this % 2 == 0 {

                                @if $span-this != $span-to {

                                    $classes: $classes + '.jam .span-#{$span-this}.skew-#{$way}-#{$skew-this}, ';

                                } @else {

                                    #{$classes}.jam .span-#{$span-this}.skew-#{$way}-#{$skew-this} {
                                        
                                        $perc: (100 / $span-actual) * (($span-actual / 2) + $skew-this);
                                        
                                        @if $way == l {

                                            grid-template-columns: auto calc(#{$perc}% - #{(xgap($media) / 100) * (100 - $perc)});

                                        } @else {

                                            grid-template-columns: calc(#{$perc}% - #{(xgap($media) / 100) * (100 - $perc)}) auto;

                                        }

                                    }

                                }

                            }
                            
                        }
                    
                        $classes: '';
                        
                    }
                    
                }
                
            }
        
        }

    }

}

//  Spans define the width of each page row

@function span-resp($span) {
    $span-rem: ($span-max - $span) / 2;
    $span-mod: ceil($span-rem / $span-resp-grp);
    $span-resp: $span-max - ($span-mod * 2);
    @return $span-resp;
}

@mixin spans($media) {
    
    .jam, .jam [class*=span-], .jam [class*=cols-] {
        grid-column-gap: xgap($media);
        grid-row-gap: ygap($media);
    }

    $span-resp-end: $span-max;
    
    @for $span from $span-max through $span-min {
        
        @if $span % 2 == 0 {
            
            @if $media == phone or $media == plus or $media == tablet {
                
                @if $span < $span-resp-end {

                    @for $span-this from $span through $span-min {

                        @if $span-this % 2 == 0 {
                            @if span-resp($span-this) == span-resp($span) {
                                $span-resp-end: $span-this;
                            }
                        }

                    }

                    @include cols-skewed($span, span-resp($span), $span-resp-end, $media);

                }
                
            } @else {
                
                @include cols-skewed($span, $span, $span, $media);
                
            }
            
        }
        
    }
    
}


//  M E D I A

//  Non grid element

.jam *:not([class*=span-]) {
    grid-column: 1 / -1;
}

@include cols-uniform(large);

@include spans(large);

@each $media in $all-media {
    
    @include media($media) {

        @if $media == phone or $media == plus {
            
            .jam *:not([class*=span-]) {
                grid-column: 2 / -2;
            }

        }

        @if $media == phone or $media == plus or $media == tablet {
            @include cols-uniform($media);
        }

        @if $media != large {
            @include spans($media);
        }

        @if $media == phone or $media == plus {
            .jam [class*=span-].bleed-ph > div:nth-of-type(2n+1),.jam [class*=span-].flip.bleed-ph > div:nth-of-type(2n+1) {
                grid-column: 1 / -1;
            }
        }
        
    }
    
}
