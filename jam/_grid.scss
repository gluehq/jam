
@import 'base';

//  B A S E

.jam {
    display: grid;
    grid-template-columns: repeat($row-max, 1fr);
    margin: 0 auto;
    width: 100%;
    max-width: $large - 1px;
}

.jam [class*=row-], .jam [class*=cols-] {
    display: grid;
    position: relative;
}

body {
    margin: 0;
}

//  Make images fit their cols

img {
    width: 100%;
}

//  Remove bottom margins from last paragraphs etc

div > *:last-child {
    // margin-bottom: 0;// Too vague, some divs will be required to group elements
}

//  R O W S  &  C O L S

@mixin cols($col-max, $col-mod) {

    @for $col-w from $col-min through $col-max {

        div.col-#{$col-w} {// Increase specificity to override the uniform width defaults
            grid-column: span #{$col-w + $col-mod};
            display: grid;
            grid-template-columns: repeat(#{$col-w + $col-mod}, 1fr);
        }

    }

}

// Create row

@mixin row($row, $row-actual, $row-to, $media) {

    // Collapse handheld row widths if $row and $row-to are different

    $row-selects: '';

    @for $row-this from $row through $row-to {

        // Ignore rows with uneven widths

        @if $row-this % 2 == 0 {

            @if $media == phone-plus {

                @if $row-this != $row-to {
    
                    // Build up the string of selectors to collapse before continuing
    
                    $row-selects: $row-selects + '.jam .row-#{$row-this}, ';
    
                } @else {

                    // Maximise phone row widths and transfer inset to columns

                    #{$row-selects}.jam .row-#{$row-this} {

                        &, &[class*=cols-] {

                            $row-inset: ($row-max - $row-actual) / 2;

                            grid-column: 1 / -1;
                            grid-template-columns: repeat(#{$row-max}, 1fr);

                            > div:nth-child(n), &.flip div:nth-child(n) {
                                display: grid;
                                grid-template-columns: repeat(#{$row-actual}, 1fr);
                                grid-column: #{$row-inset + 1} / #{-1 - $row-inset};
                            }

                        }

                    }

                }

            } @else {

                .jam .row-#{$row-this} {

                    // Set default width and position of row

                    $row-inset: ($row-max - $row-actual) / 2;
                    
                    grid-template-columns: repeat(#{$row-actual}, 1fr);
                    grid-column: #{$row-inset + 1} / #{-1 - $row-inset};

                    // Set specific col width

                    @for $cols from 2 through $cols-max {

                        &.cols-#{$cols} > div {
                            grid-column: span floor($row-actual / $cols);
                        }

                        // Increase width of columns if row width has been increased
                        
                        @if $row-this != $row-actual {

                            &.cols-#{$cols} > {
                                @include cols($row-this - $col-min, ($row-actual - $row-this) / 2);
                            }

                        }

                    }

                }

            }

        }

    }

}


// Return which group a row will collapse to
// Size of group set with $row-collapse-size

@function row-collapse($row) {
    $row-remain: ($row-max - $row) / 2;
    $row-mod: ceil($row-remain / $row-collapse-size);
    $row-collapse: $row-max - ($row-mod * 2);
    @return $row-collapse;
}

// Determine how to build rows

@mixin rows($media) {

    $row-collapse-last: $row-max;
    
    @for $row from $row-max through $row-min {
        
        @if $row % 2 == 0 {

            @if $media == large {
            
                @include row($row, $row, $row, $media);

            }
            
            @if $media == phone-plus or $media == phone-tablet {
                
                @if $row < $row-collapse-last {

                    @for $row-this from $row through $row-min {

                        @if $row-this % 2 == 0 {
                            @if row-collapse($row-this) == row-collapse($row) {
                                $row-collapse-last: $row-this;
                            }
                        }

                    }

                    @include row($row, row-collapse($row), $row-collapse-last, $media);

                }
                
            }
            
        }
        
    }
    
}

@mixin gaps($media) {
    
    @if $media != phone-plus and $media != phone-plus {

        .jam, .jam [class*=row-], .jam [class*=cols-], .jam [class*=col-] {
            grid-column-gap: xgap($media);
            grid-row-gap: ygap($media);
        }

    }

}

//  Output uniform columns for flip and fallback rules

@mixin flips($media) {

    @for $cols from 2 through $cols-max {

        @if $media != phone-plus {

            // Set the flip on non-phones
        
            .jam .cols-#{$cols} {
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}), &.flip > div:nth-of-type(#{$cols}n+#{$cols - $col + 1}) {
                        order: $col;
                    }
                    
                }
                
            }

        } @else {

            // Unset the flip on phones

            .jam .cols-#{$cols}, .jam .cols-#{$cols}.flip {

                > div {
                    grid-column: 1 / -1;
                }
                    
                @for $col from 1 through $cols {
                    
                    > div:nth-of-type(#{$cols}n+#{$col}) {
                        order: $col;
                    }
                    
                }

            }

        }

    }
    
}

//  M E D I A

/* Non grid element default positioning */
.jam *:not([class*=row-]) {
    grid-column: 1 / -1;
}

/* Row defaults */
@include rows(large);

/* Gap defaults */
@include gaps(large);
        
/* Explicit column widths */
.jam div[class*=row-] {

    @include cols($row-max - $col-min, 0);

}

/* Column flips */
@include flips(large);

/* Media specific gaps */
@each $media in $all-media {
    
    @include media($media) {

        // Exclude combined media
        @if $media != large and $media != phone-tablet and $media != phone-plus {

            @include gaps($media);

        }

        @if $media == phone-tablet {

            /* Collapsing row widths on handhelds */
            // Tablet margins will not reduce if removed
            @include rows($media);

        }

        @if $media == phone-plus {
        
            /* Non grid element phone positioning */
            .jam *:not([class*=row-],[class*=col-]) {
                grid-column: 2 / -2;
            }

            /* Maximise phone row widths and transfer inset to columns */
            // Phone image bleeds will break if removed
            @include rows($media);
            
            /* Media specific column flipping */
            @include flips($media);

            /* Phone image bleeds */
            .jam [class*=row-].bleed-ph > div:nth-of-type(2n+1), .jam [class*=row-].flip.bleed-ph > div:nth-of-type(2n+1) {
                grid-template-columns: repeat(#{$row-max}, 1fr);
                grid-column: 1 / -1;
            }

        }

    }

}
