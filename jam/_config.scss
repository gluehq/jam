
//  V A R I A B L E S

// Maximum span width: 12 or 14 recommended. High values drastically increase output file size
$span-max: 18;

// Minimum span width: 2 or more recommended if $span-max is greater than 8
$span-min: 2;

// List of acceptable numbers of columns in a span
$cols: 2 3 4 6;

// Span merge range: how many span widths are grouped together on mobile
$spans-merge: 2;

// Maximum padding multiplier: each will be half the amount in ygap variables
$padding-mod-max: 4;

// Media queries including key combined ranges
$all-media: large, standard, tablet, plus, phone, phone-plus;
$single-media: large, standard, tablet, plus, phone;

$gap-y-ph:   24px;
$gap-y-pl:   28px;
$gap-y-tb:   32px;
$gap-y-st:   36px;
$gap-y-lg:   40px;

$gap-x-ph:   20px;
$gap-x-pl:   24px;
$gap-x-tb:   28px;
$gap-x-st:   40px;
$gap-x-lg:   44px;

$plus:      411px;      // Pixel 2 portrait
$tablet:    768px;      // iPad 10" portrait
$standard:  1024px;     // iPad 10" landscape, 13" portrait
$large:     1366px;     // Common 13" laptop size

$grey-5:    #f5f5f5;  // 5%
$grey-10:   #ececec;  // 10%
$grey-15:   #e1e1e1;  // 15%
$grey-20:   #cdcdcd;  // 20%
$grey-25:   #cccccc;  // 25%
$grey-30:   #c2c2c2;  // 30%
$grey-40:   #acacac;  // 40%
$grey-50:   #959595;  // 50%
$grey-60:   #696969;  // 60%
$grey-70:   #636363;  // 70%
$grey-80:   #484848;  // 80%


//  M E D I A   Q U E R I E S

@mixin jam-media($media) {
    
    //  Individual ranges

    @if $media == phone {
        @media (max-width: $plus - 1px) { @content; }
    }

    @if $media == plus {
        @media (min-width: $plus) and (max-width: $tablet - 1px) { @content; }
    }

    @if $media == tablet {
        @media (min-width: $tablet) and (max-width: $standard - 1px) { @content; }
    }

    @if $media == standard {
        @media (min-width: $standard) and (max-width: $large) { @content; }
    }

    @if $media == large {
        @media (min-width: $large + 1px) { @content; }
    }

    //  Combined ranges

    @if $media == phone-plus {
        @media (max-width: $tablet - 1px) { @content; }
    }

    @if $media == phone-tablet {
        @media (max-width: $standard - 1px) { @content; }
    }

    @if $media == phone-standard {
        @media (max-width: $large) { @content; }
    }

    @if $media == plus-tablet {
        @media (min-width: $plus) and (max-width: $standard - 1px) { @content; }
    }

    @if $media == plus-standard {
        @media (min-width: $plus) and (max-width: $large) { @content; }
    }

    @if $media == plus-large {
        @media (min-width: $plus) { @content; }
    }

    @if $media == tablet-standard {
        @media (min-width: $tablet) and (max-width: $large) { @content; }
    }

    @if $media == tablet-large {
        @media (min-width: $tablet) { @content; }
    }
    
    @if $media == standard-large {
        @media (min-width: $standard) { @content; }
    }

}


//  F U N C T I O N S

// Responsive fixed-width gaps function

@function jam-gap-x($media, $modifier) {
        
    $gap-x: '';
    
    @if $media == phone {
        $gap-x: $gap-x-ph;
    }   

    @if $media == plus {
        $gap-x: $gap-x-pl;
    }

    @if $media == tablet {
        $gap-x: $gap-x-tb;
    }

    @if $media == standard {
        $gap-x: $gap-x-st;
    }

    @if $media == large {
        $gap-x: $gap-x-lg;
    }

    @if $modifier != null {
        $gap-x: $gap-x * $modifier;
    }
    
    @return $gap-x;
    
}

@function jam-gap-y($media, $modifier) {
        
    $gap-y: '';
    
    @if $media == phone {
        $gap-y: $gap-y-ph;
    }   

    @if $media == plus {
        $gap-y: $gap-y-pl;
    }

    @if $media == tablet {
        $gap-y: $gap-y-tb;
    }

    @if $media == standard {
        $gap-y: $gap-y-st;
    }

    @if $media == large {
        $gap-y: $gap-y-lg;
    }

    @if $modifier != null {
        $gap-y: $gap-y * $modifier;
    }
    
    @return $gap-y;
    
}

// Return span units

@function jam-unit($parent-span, $media, $modifier) {
    $unit: percentage(1/$parent-span) * $modifier;
    @return $unit;
}
